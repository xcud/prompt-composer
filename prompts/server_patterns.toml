# MCP Server Tool Patterns
#
# This file defines patterns for inferring tools from MCP server configurations.
# It's externally editable so the community can add support for new server types
# without modifying the core code.
#
# Format: Each section defines a server pattern and its expected tools

[filesystem_servers]
# Patterns that indicate a filesystem server
command_patterns = ["filesystem", "file-server", "fs"]
arg_patterns = ["@modelcontextprotocol/server-filesystem"]
name_patterns = ["file", "fs", "filesystem"]

tools = [
    { name = "read_file", description = "Read file contents" },
    { name = "write_file", description = "Write file contents" },
    { name = "list_directory", description = "List directory contents" },
    { name = "create_directory", description = "Create a new directory" },
    { name = "search_files", description = "Find files by name" },
]

[weather_servers]
# Patterns that indicate a weather server
command_patterns = ["weather"]
arg_patterns = []
name_patterns = ["weather", "meteorology", "forecast"]

tools = [
    { name = "get_current", description = "Get current weather" },
    { name = "get_forecast", description = "Get weather forecast" },
    { name = "get_conditions", description = "Get weather conditions" },
]

[desktop_servers]
# Patterns that indicate desktop/system management servers
command_patterns = ["desktop", "commander", "system"]
arg_patterns = []
name_patterns = ["desktop", "commander", "system", "admin"]

tools = [
    { name = "read_file", description = "Read file contents from the file system" },
    { name = "write_file", description = "Write or append to file contents" },
    { name = "list_directory", description = "Get a detailed listing of files and directories" },
    { name = "search_files", description = "Find files by name using case-insensitive substring matching" },
    { name = "search_code", description = "Search for text/code patterns within file contents" },
    { name = "edit_block", description = "Apply surgical text replacements to files" },
    { name = "execute_command", description = "Execute a terminal command" },
    { name = "get_file_info", description = "Get file metadata and information" },
]

[dynamic_servers]
# Patterns that indicate dynamic/programmable servers
command_patterns = ["python", "node", "mcp_server"]
arg_patterns = ["mcp_server.py", "mcp-server", "dynamic"]
name_patterns = ["dynamic", "custom", "lit-platform", "programmable"]

tools = [
    { name = "create_tool", description = "Create a new dynamic MCP tool" },
    { name = "list_tools", description = "List available dynamic tools" },
    { name = "update_tool", description = "Update an existing dynamic tool" },
    { name = "delete_tool", description = "Remove a dynamic tool" },
]

[data_servers]
# Patterns that indicate data analysis servers
command_patterns = ["data", "analytics", "jupyter"]
arg_patterns = []
name_patterns = ["data", "analytics", "analysis", "jupyter", "pandas"]

tools = [
    { name = "process_csv", description = "Process CSV data files" },
    { name = "analyze_data", description = "Perform data analysis" },
    { name = "create_chart", description = "Create data visualizations" },
    { name = "query_data", description = "Query structured data" },
]

[web_servers]
# Patterns that indicate web/API servers
command_patterns = ["http", "api", "web"]
arg_patterns = []
name_patterns = ["api", "web", "http", "rest", "graphql"]

tools = [
    { name = "http_get", description = "Make HTTP GET requests" },
    { name = "http_post", description = "Make HTTP POST requests" },
    { name = "fetch_url", description = "Fetch content from URLs" },
    { name = "api_call", description = "Make API calls" },
]
